When would you want to use a remote repository rather than keeping all your work local?

	When you want to share your work with colleagues, friends, or the open-source
	community to get feedback. Or, you could use a remote repository if you are working
	on different machines and are looking for a way to sync between them.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	More control over your work. You should always have a sense of how far along your
	public Git repostiory is compared to your local Git folders. On the flip side, you
	may have local commits that aren't complete and you don't want to share with others
	yet which is why it's useful to have control over remote pushes.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Fork: something you do only on Github to take an existing repository and bring it
	to your Github account so that you can make changes to it. This gives the original
	author credit for the work he/she had done up until that point, allows Github to
	track stats, and makes it easier for you to suggest changes back to the original
	author.

	Clones: you can clone a repo locally or on Github. The idea is that you'd clone a
	repo from Github locally to make changes or locally clone to start a new project
	which is very similar to the original.

	Branches: You can have branches of a repo locally or remotely. Branches are simply
	labeled commits that help you keep track of changes.

What is the benefit of having a copy of the last known state of the remote stored locally?

	This serves as a comparison point so you can see how many commits ahead of the remote
	copy you are. Or, if you are collaborating, you can do a fetch request to get a sense
	of how many commits your teammates have maded and how far off you are from their work.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Without git, collaboration would involve saving multiple files (and actually sets of
	files) each time a significant change is made. It would be harder to keep track of
	changes and would involve a lot more communication and time spent together to sort out
	changes. Diffs would be hard to know because you'd have two different files saved 
	without a direct comparison between them. I'm really struggling to come up with things that would be easier but I guess the main thing is that collaborators would not have to
	put in significant effort up front to get up to speed on Git/Github.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Since working in a different branch is more complex and involves multiple steps to get
	up to date, it should be used mostly when you are collaborating. It seems to be the
	preferred method to share code after which you can create a pull-request which is what
	eventually merges the code into master. Creating a different branch is the safe and
	inclusive way to make changes when collaborating with others.
